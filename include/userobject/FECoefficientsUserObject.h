#ifndef FECOEFFICIENTSUSEROBJECT_H
#define FECOEFFICIENTSUSEROBJECT_H

// MOOSE includes
#include "ElementIntegralVariableUserObject.h"

// Forward Declarations
class FECoefficientsUserObject;
class FunctionalExpansionInterface;

template <>
InputParameters validParams<FECoefficientsUserObject>();

/**
 * This UserObject interacts with a MooseApp through functional expansions.
 *
 * If the MooseApp is a subclass of FunctionalExpansionAppInterface then the
 * expansion coefficients will be pulled directly from the app itself, since the
 * assumption is that the expansion coefficients have been generated by and
 * loaded from an external application.
 * Otherwise, the inner products of the specified variable and the components of
 * the underlying functional expansion series will be calculated to generate the
 * expansion coefficients.
 */
class FECoefficientsUserObject : public ElementIntegralVariableUserObject
{
public:
  /// Constructor
  FECoefficientsUserObject(const InputParameters & parameters);

  /// Virtual destructor
  virtual ~FECoefficientsUserObject();

  // UserObject overrides
  virtual void finalize() override;
  virtual void initialize() override;
  virtual void threadJoin(const UserObject & sibling) override;

  // ElementIntegralUserObject overrides
  virtual Real getValue() override {return _integral_value;}

  /// Return a reference to the underlying functional expansion
  const FunctionalExpansionInterface & getFunctionalExpansion() const {return *_functional_expansion;}

  /// The type of functional expansion specified by the user
  const MooseEnum _functional_expansion_type;

  /// Keep the expansion coefficients after each solve
  const bool _keep_history;

  /**
   * The series orders of the underlying functional expansion
   * Note: the number of terms in each series is equal to the order plus 1. The
   * zeroth order is always a constant value
   */
  const std::vector<unsigned int> _orders;

protected:
  // ElementIntegralUserObject overrides
  virtual Real computeIntegral() override;
  virtual Real computeQpIntegral() override;

  /// Index of the coefficient currently being calculated
  unsigned int _c;

  /// History of the expansion coefficients for each solve
  std::vector< std::vector<Real> > _coefficient_history;

  /// Current coefficient partial sums
  std::vector<Real> _coefficient_partials;

  /// Pointer to the underlying functional expansion
  FunctionalExpansionInterface * _functional_expansion;

  /// Cached values of the monomial calculations at each point
  std::unordered_map< const Point *, std::vector<Real> > _quadrature_monomials;
};

#endif // FECOEFFICIENTSUSEROBJECT_H
